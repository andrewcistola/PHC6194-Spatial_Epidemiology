FROM (
SELECT
ST_GeomFromText('POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))') as geom1,
ST_GeomFromText('LINESTRING(0 0, 1 0)') as geom2
) as g;
"
dbGetQuery(con,q)
#equality
q<-"
SELECT
name,
ST_OrderingEquals(geom,geom) as g_oeq_g,
ST_OrderingEquals(geom,ST_Reverse(geom)) as g_oeq_rev,
ST_OrderingEquals(geom, ST_Multi(geom)) as g_oeq_m,
ST_Equals(geom, geom) as g_seq_g,
ST_Equals(geom, ST_Multi(geom)) as g_seq_m
FROM (
VALUES
('A 2D linestring', ST_GeomFromText('LINESTRING(3 5,2 4,2 5)')),
('A point', ST_GeomFromText('POINT(2 5)')),
('A triangle', ST_GeomFromText('POLYGON((3 5,2.5 4.5, 2 5,3 5))')),
('An invalid polygon',ST_GeomFromText('POLYGON((2 0,0 0,1 1,1 -1,2 0))'))
) as x(name,geom);
"
dbGetQuery(con,q)
#airports within 10km of gainesville
q<-"
SELECT name, iso_country, iso_region
FROM wk4.airports
WHERE ST_DWithin(geog,ST_Point(-82.3248,29.6516)::geography,10000);
"
dbGetQuery(con,q)
#N closest airports
q<-"
SELECT ident, name, iso_country, iso_region
FROM wk4.airports
CROSS JOIN
(SELECT ST_Point(-82.3248,29.6516)::geography AS ref_geog) AS r
WHERE ST_DWithin(geog,ref_geog,10000)
ORDER BY ST_Distance(geog,ref_geog)
LIMIT 5;
"
dbGetQuery(con,q)
#find closest location
q<-"
SELECT DISTINCT ON (a.ident)
a.ident, a.name AS airport, n.name AS closest_navaid, (ST_Distance(a.geog,n.geog)/1000)::integer AS dist_km
FROM wk4.airports AS a
LEFT JOIN wk4.navaids AS n ON ST_DWithin(a.geog, n.geog, 100000)
ORDER BY a.ident, dist_km;
"
head(dbGetQuery(con,q)) #ORDER BY ensures the navaid selected for output for each airport is the closest to that airport. Radius is specified in ST_DWithin, the wider, the slower the query.
#intersection with tolerance
q<-"
SELECT ST_DWithin(
ST_GeomFromText('LINESTRING(1 2, 3 4)'),
ST_Point(3.00001, 4.000001),
0.0001
);
"
dbGetQuery(con,q)
#KNN operators: closest 10 centroids of geometry bounding boxes
q<-"
SELECT pid, geom<->ST_Transform(ST_SetSRID(ST_Point(-71.09368,42.35857),4326),26986) AS dist_centroid
FROM wk4.land
WHERE land_type='apartment'
ORDER BY geom<->ST_Transform(ST_SetSRID(ST_Point(-71.09368,42.35857),4326),26986)
LIMIT 10;
"
dbGetQuery(con,q) #both sides must have the same SRID
#KNN operators: closest shopping to each parcel
q<-"
SELECT
l.pid,
(
SELECT s.pid
FROM wk4.land AS s
WHERE s.land_type='shopping'
ORDER BY s.geom <-> l.geom LIMIT 1
) AS closest_shopping
FROM wk4.land AS l;
"
head(dbGetQuery(con,q))
#KNN operators: 3 closest shopping malls using a LATERAL join
q<-"
SELECT l.pid, r.pid AS n_closest_shopping
FROM wk4.land AS l
CROSS JOIN LATERAL
(
SELECT s.pid
FROM wk4.land as s
WHERE s.land_type='shopping'
ORDER BY s.geom <-> l.geom
LIMIT 3
) AS r;
"
head(dbGetQuery(con,q))
#use KNN operators with geography
q<-"
DROP INDEX IF EXISTS wk4.idx_airports_geom_gist_case;
CREATE INDEX idx_airports_geom_gist_case ON wk4.airports USING gist(geometry(geog));
With ref AS(
SELECT ST_Point(-82.3248,29.6516)::geography AS ref_geog
)
SELECT ident, name
FROM (
SELECT ident, name, geog
FROM wk4.airports
ORDER BY
(SELECT ref_geog::geometry FROM ref) <-> geog::geometry
LIMIT 20
) AS x
ORDER BY ST_Distance(geog,(SELECT ref_geog FROM ref))
LIMIT 5;
"
dbGetQuery(con,q)
#geotagging
#tagging data to a specific region: add time zone to airports
q<-"
ALTER TABLE wk4.airports ADD COLUMN tz varchar(30);
UPDATE wk4.airports
SET tz=t.tzid
FROM wk4.tz_world AS t
WHERE ST_Intersects(wk4.airports.geog, t.geog);
"
dbSendQuery(con,q)
q<-"
SELECT ident, name, CURRENT_TIMESTAMP AT TIME ZONE tz AS ts_at_airport
FROM wk4.airports
WHERE ident IN ('KBOS','KSAN','LIRF','OMDB','ZLXY');
"
dbGetQuery(con,q)
#linear referencing: snapping points to the closest linestring
q<-"
SELECT DISTINCT ON (p.pid)
p.addr_num || ' ' || full_str AS parcel,
r.road_name AS road,
ST_ClosestPoint(p.geom,r.geom) AS snapped_point
FROM wk4.land AS p
INNER JOIN wk4.road AS r ON ST_DWithin(p.geom,r.geom,20.0)
ORDER BY p.pid,ST_Distance(p.geom,r.geom);
"
head(dbGetQuery(con,q))
#spatial aggregation: cities with more than one record
q<-"
SELECT
city,
COUNT(city) AS num_records,
SUM(ST_NumGeometries(geom)) AS numpoly_before,
ST_NumGeometries(ST_Multi(ST_Union(geom))) as numpoly_after
FROM wk4.cities
GROUP BY city
HAVING COUNT(city)>1;
"
dbGetQuery(con,q)
#aggregate to one record per city
q<-"
SELECT city, ST_Multi(ST_Union(geom))::geometry(multipolygon,2227) AS geom
INTO wk4.distinct_cities
FROM wk4.cities
GROUP BY city, ST_SRID(geom);
ALTER TABLE wk4.distinct_cities
ADD CONSTRAINT pk_distinct_cities PRIMARY KEY (city);
CREATE INDEX idx_distinct_cities_geom ON wk4.distinct_cities USING gist(geom);
"
dbSendQuery(con,q) #create a new table, aggregate, cast, add primary key, and add a spatial index
#clipping
q<-"
SELECT
ST_Intersects(g1.geom1,g1.geom2) AS they_intersect,
GeometryType(ST_Difference(g1.geom1,g1.geom2)) AS intersect_geom_type
FROM (
SELECT ST_GeomFromText('POLYGON((2 4.5,3 2.6,3 1.8,2 0,-1.5 2.2,0.056 3.222,-1.5 4.2,2 6.5,2 4.5))') AS geom1,
ST_GeomFromText('LINESTRING(-0.62 5.84,-0.8 0.59)') AS geom2
) AS g1;
"
dbGetQuery(con,q)
q<-"
SELECT
ST_Intersects(g1.geom1,g1.geom2) AS they_intersect,
GeometryType(ST_Difference(g1.geom2,g1.geom1)) AS intersect_geom_type
FROM (
SELECT ST_GeomFromText('POLYGON((2 4.5,3 2.6,3 1.8,2 0,-1.5 2.2,0.056 3.222,-1.5 4.2,2 6.5,2 4.5))') AS geom1,
ST_GeomFromText('LINESTRING(-0.62 5.84,-0.8 0.59)') AS geom2
) AS g1;
"
dbGetQuery(con,q)
q<-"
SELECT
ST_Intersects(g1.geom1,g1.geom2) AS they_intersect,
GeometryType(ST_SymDifference(g1.geom1,g1.geom2)) AS intersect_geom_type
FROM (
SELECT ST_GeomFromText('POLYGON((2 4.5,3 2.6,3 1.8,2 0,-1.5 2.2,0.056 3.222,-1.5 4.2,2 6.5,2 4.5))') AS geom1,
ST_GeomFromText('LINESTRING(-0.62 5.84,-0.8 0.59)') AS geom2
) AS g1;
"
dbGetQuery(con,q)
#Splitting
q<-"
SELECT (ST_Dump(ST_Split(g1.geom1,g1.geom2))).geom AS geom
FROM (
SELECT
ST_GeomFromText('POLYGON((2 4.5,3 2.6,3 1.8,2 0,-1.5 2.2,0.056 3.222,-1.5 4.2,2 6.5,2 4.5))') AS geom1,
ST_GeomFromText('LINESTRING(-0.62 5.84,-0.8 0.59)') AS geom2
) AS g1;
"
dbGetQuery(con,q)
#create a schema to house the data for this week
q<-"
DROP SCHEMA IF EXISTS wk4 CASCADE;
CREATE SCHEMA wk4;
"
dbSendQuery(con,q)
#load the package that will allow us to connect to postgresql
library("RPostgreSQL")
#create a connection
#save the password
pw <- "vmuser"
#load the postgresql driver
drv<-dbDriver("PostgreSQL")
#create a connection to the postgres database
con<-dbConnect(drv,dbname="phc6194db",host="localhost",user="phc6194",password=pw)
#query testtbl
#SELECT and FROM
q<-"SELECT * FROM testtbl;"
#run the sql query and save the results as a dataframe
dat<-dbGetQuery(con,q)
dat
#LIMIT
q<-"SELECT * FROM testtbl LIMIT 2;"
dbGetQuery(con,q)
#WHERE
q<-"SELECT * FROM testtbl WHERE date IS NOT NULL;"
dbGetQuery(con,q)
#LIKE
q<-"SELECT * FROM testtbl WHERE author LIKE '_uthor 5';"
dbGetQuery(con,q)
#ILIKE
q<-"SELECT * FROM testtbl WHERE author ILIKE '_UTHOR 5';"
dbGetQuery(con,q)
#IN
q<-"SELECT * FROM testtbl WHERE id IN (1,2,3,4);"
dbGetQuery(con,q)
#BETWEEN
q<-"SELECT * FROM testtbl WHERE date BETWEEN '2018-01-01' AND '2018-02-01';"
dbGetQuery(con,q)
#AND
q<-"SELECT * FROM testtbl WHERE date IS NULL AND id>5;"
dbGetQuery(con,q)
#OR
q<-"SELECT * FROM testtbl WHERE date IS NULL OR id>5;"
dbGetQuery(con,q)
#ORDER BY
q<-"SELECT * FROM testtbl ORDER BY date DESC;"
dbGetQuery(con,q)
#export R dataframe to postgresql
q<-"SELECT * FROM testtbl WHERE date IS NOT NULL ORDER BY date DESC;"
dat<-dbGetQuery(con,q)
dat
?dbWriteTable
dbWriteTable(con,'testtbl2',dat,row.names=F,append=T)
#check
q<-"SELECT * FROM testtbl2;"
dbGetQuery(con,q)
#create some tables
q<-"
CREATE TABLE subject(
id SERIAL NOT NULL PRIMARY KEY,
name VARCHAR(20) NOT NULL,
gender INT NOT NULL,
age INT NOT NULL,
race INT NOT NULL,
county_id INT NOT NULL,
state_id INT NOT NULL
);
"
dbSendQuery(con,q) #this function execute the query
q<-"
CREATE TABLE county(
id INT NOT NULL,
state_id INT NOT NULL,
name VARCHAR(20) NOT NULL,
income INT NOT NULL,
PRIMARY KEY (id,state_id)
);
"
dbSendQuery(con,q)
q<-"
CREATE TABLE state(
id SERIAL NOT NULL PRIMARY KEY,
name VARCHAR(20) NOT NULL,
policy INT NOT NULL,
date DATE
);
"
dbSendQuery(con,q)
#insert some data
q<-"
INSERT INTO subject(name,gender,age,race,county_id,state_id)
VALUES  ('John',1,5,1,1,1),
('Mary',0,7,2,2,1),
('Mike',1,6,3,1,2),
('Linda',0,5,1,2,2),
('Lucas',1,4,1,1,3),
('Aiden',1,10,4,2,3);
"
dbSendQuery(con,q)
q<-"
INSERT INTO county(id,state_id,name,income)
VALUES  (1,1,'Alachua',78987),
(2,1,'Orange',87689),
(1,2,'Newton',56765),
(2,2,'Burke',67890),
(1,3,'Glenn',98678),
(2,3,'Kings',87908);
"
dbSendQuery(con,q)
q<-"
INSERT INTO state(name,policy,date)
VALUES  ('Florida',1,'2002-11-23'),
('Georgia',0,NULL),
('California',1,'2004-12-23');
"
dbSendQuery(con,q)
#check
q<-"SELECT * FROM subject;"
dbGetQuery(con,q)
q<-"SELECT * FROM county;"
dbGetQuery(con,q)
q<-"SELECT * FROM state;"
dbGetQuery(con,q)
#JOIN
q<-"
SELECT subject.name, state.name as state_name, state.policy
FROM subject
JOIN state ON subject.state_id=state.id
;
"
dbGetQuery(con,q)
q<-"
SELECT subject.name, state.name as state_name, county.income
FROM subject
JOIN state ON subject.state_id=state.id
JOIN county ON subject.state_id=county.state_id
AND subject.county_id=county.id;
"
dbGetQuery(con,q)
#Aggregate Functions
q<-"
SELECT COUNT(id) as n
FROM subject
;
"
dbGetQuery(con,q)
q<-"
SELECT COUNT(id) as n, state_id
FROM subject
GROUP BY state_id
;
"
dbGetQuery(con,q)
#DISTINCT
q<-"
SELECT COUNT(DISTINCT state_id) as nstate
FROM subject
;
"
dbGetQuery(con,q)
#HAVING
q<-"
SELECT MAX(income) as maxIncome, state_id
FROM county
GROUP BY state_id
WHERE MAX(income)>90000
;
"
dbGetQuery(con,q)
#HAVING
q<-"
SELECT MAX(income) as maxIncome, state_id
FROM county
GROUP BY state_id
HAVING MAX(income)>90000
;
"
dbGetQuery(con,q)
#CASE
q<-"
SELECT name,
gender,
CASE WHEN age BETWEEN 1 AND 4 THEN 1
WHEN age BETWEEN 5 AND 8 THEN 2
WHEN age > 8 THEN 3
ELSE NULL
END AS recodeage
FROM subject
;
"
dbGetQuery(con,q)
#create a temp file
temp<-tempfile()
#download the file into the tempfile
download.file("ftp://ftp.cdc.gov/pub/Health_Statistics/NCHS/Datasets/NHIS/2015/familyxx.zip",temp)
#unzip the file and import as a dataframe family
family<-read.csv(unz(temp,"familyxx.csv"),header = T)
#remove the temp file
unlink(temp)
#do the same for the household file
temp<-tempfile()
download.file("ftp://ftp.cdc.gov/pub/Health_Statistics/NCHS/Datasets/NHIS/2015/househld.zip",temp)
household<-read.csv(unz(temp,"househld.csv"),header = T)
unlink(temp)
#check the downloaded data
head(family)
str(family)
head(household)
str(household)
tolower(colnames(family))
colnames(family)
tolower(colnames(family))
#Export the data to postgresql database
#lower case for colnames
colnames(family)<-tolower(colnames(family))
colnames(household)<-tolower(colnames(household))
dbWriteTable(con,'family',family,row.names=F,overwrite=T)
dbWriteTable(con,'household',household,row.names=F,overwrite=T)
#check the exported data
q<-"
SELECT *
FROM family
LIMIT 10
;
"
dbGetQuery(con,q)
q<-"
SELECT *
FROM household
LIMIT 10
;
"
dbGetQuery(con,q)
#some simple queries
#which quarter was the interview conducted? show frequencies
q<-"
SELECT intv_qrt, COUNT(intv_qrt) AS n_intv
FROM household
GROUP BY intv_qrt
ORDER BY intv_qrt
;
"
dbGetQuery(con,q)
#what is the maximum number of families within a household?
q<-"
SELECT COUNT(fmx) AS max_n_fam
FROM family
GROUP BY hhx
;
"
dbWriteTable(con,'temp',dbGetQuery(con,q),row.names=F,append=T)
q<-"
SELECT MAX(max_n_fam)
FROM temp
;
"
dbGetQuery(con,q)
q<-"
DROP TABLE IF EXISTS temp2;
SELECT hhx,fmx,
CASE WHEN fm_educ1 BETWEEN 97 AND 99 THEN NULL
ELSE fm_educ1
END AS recode_fm_educ1
FROM family;
"
dbWriteTable(con,'temp2',dbGetQuery(con,q),row.names=F,append=F)
q<-"
DROP TABLE IF EXISTS temp3;
SELECT MAX(recode_fm_educ1) AS maxeduc, hhx
FROM temp2
GROUP BY temp2.hhx;
"
dbWriteTable(con,'temp3',dbGetQuery(con,q),row.names=F,append=F)
q<-"
SELECT temp3.hhx,temp3.maxeduc,household.livqrt
FROM temp3
LEFT JOIN household ON temp3.hhx=household.hhx
ORDER BY temp3.hhx
LIMIT 10
;
"
dbGetQuery(con,q)
#use multiple qureies
q<-"
SELECT b.hhx,b.maxeduc,household.livqrt
FROM
(SELECT MAX(a.recode_fm_educ1) AS maxeduc, a.hhx
FROM
(SELECT
hhx,
fmx,
CASE WHEN fm_educ1 BETWEEN 97 AND 99 THEN NULL
ELSE fm_educ1
END AS recode_fm_educ1
FROM family) as a
GROUP BY a.hhx) as b
LEFT JOIN household ON b.hhx=household.hhx
LIMIT 10
;
"
dbGetQuery(con,q)
#close the connection
dbDisconnect(con)
dbUnloadDriver(drv)
